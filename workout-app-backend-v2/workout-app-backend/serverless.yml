service: workout-app-backend

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    WORKOUT_TABLE: ${env:WORKOUT_TABLE}
    EXERCISE_TABLE: ${env:EXERCISE_TABLE}
    WORKOUT_EXERCISE_TABLE: ${env:WORKOUT_EXERCISE_TABLE}
    USER_TABLE: ${env:USER_TABLE}
    USER_WORKOUT_TABLE: ${env:USER_WORKOUT_TABLE}
    USER_WORKOUT_LOG_TABLE: ${env:USER_WORKOUT_LOG_TABLE}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:GetItem"
            - "dynamodb:Query"
            - "dynamodb:Scan"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:BatchWriteItem"
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WORKOUT_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXERCISE_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WORKOUT_EXERCISE_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}/index/*" # Ensure access to all indexes on the USER_TABLE
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_WORKOUT_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_WORKOUT_TABLE}/index/workout_id-user_id-index"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_WORKOUT_LOG_TABLE}"
functions:
  getWorkoutAndExercises:
    handler: src/getWorkout.getWorkoutAndExercises
    events:
      - http:
          path: workout/{workoutId}
          method: get
          cors: true

  signUp:
    handler: src/userAccess.signUp
    events:
      - http:
          path: user/signup
          method: post
          cors: true

  signIn:
    handler: src/userAccess.signIn
    events:
      - http:
          path: user/signin
          method: post
          cors: true

  getLatestWorkoutLog:
    handler: src/userLogs.getLatestWorkoutLog
    events:
      - http:
          path: userLogs/getLatestWorkoutLog
          method: get
          cors: true 

  getAllWorkoutLogs:
    handler: src/userLogs.getAllWorkoutLogs
    events:
      - http:
          path: userLogs/getAllWorkoutLogs
          method: get
          cors: true

  createUserWorkout:
    handler: src/userLogs.createUserWorkout
    events:
      - http:
          path: userLogs/createUserWorkout
          method: post
          cors: true

  createUserLog:
    handler: src/userLogs.createUserLog
    events:
      - http:
          path: userLogs/createUserLog
          method: post
          cors: true

plugins:
  - serverless-dotenv-plugin

package:
  individually: true
  exclude:
    - node_modules/**
    - test/**
    - docs/**
    - .git/**
    - .vscode/**


custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude: ['aws-sdk']
    target: 'node18'
    define:
      'require.resolve': undefined
    platform: 'node'
    concurrency: 10
  scripts:
    hooks:
      'before:package:createDeploymentArtifacts': npm run test